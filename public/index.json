[
{
	"uri": "/4-migratinginfrastructure/4.1-migratingyourapplication/4.1.1-configureawsmgnservice/",
	"title": "Configure AWS MGN service ",
	"tags": [],
	"description": "",
	"content": "Application Migration Service must be initialized upon first use in each AWS Account and Region where replication will need to happen. The First step is to create the Replication Settings template, then the service is initialized by creating the IAM Roles which are required for the service to work.\n  Go to AWS Application Migration Service .\n  Click on Get started.   Choose Set up service.   Once Application Migration Service is initialized, you\u0026rsquo;ll be redirected into the Application Migration Service Console Source Servers page.\n  Under Settings, choose Replication template.\n  Then, click on Edit.   At Staging area subnet, select subnet Target Public.   Add tag with key is Environment and value is Migration-Staging.\n  Then, click on Save template.   Wait a second and make sure your changes are saved.   "
},
{
	"uri": "/4-migratinginfrastructure/4.2-migratingyourdatabase/4.2.1-createaurorafinaltargetdatabases/",
	"title": "Create Aurora final target database ",
	"tags": [],
	"description": "",
	"content": "  Go to RDS.\n  Click on Create database.   At Choose a database creation method, choose Standard create.\n  At Engine options, choose Aurora (MySQL Compatible).   At Available versions, choose Aurora(MySQL 5.7)2.11.4 or its latest version.\n  At Templates, choose Dev/Test.\n  At DB cluster identifier, input MID-Wordpress.\n  At Master username, input admin.   At Master password, input 12345678.\n  Repeat password at Confirm master password.   At DB instance class, choose Burstable classes (includes t classes).\n  Change the size to db.t3.medium.\n  At Multi-AZ deployment, select Don\u0026rsquo;t create an Aurora Replica.   At Virtual private cloud (VPC), choose Target VPC.\n  At Public access, select No.\n  At VPC security group (firewall), select Choose existing.\n  At Existing VPC security groups, choose FCJ-MigrationHub-Workshop-SOURCENETWORK-XXXXXXXXXXXX-TargetSecurityGroup-XXXXXXXXXXXX subnet.\n  At Availability Zone, choose us-west-2a.   At Database authentication option, select Password authentication.\n  At Monitoring, uncheck Enable Enhanced monitoring.\n  Expand Additional configuration, at Initial database name set wordpressdb.   At Encryption, uncheck Enable encryption.   Then, click on Create database.   Wait until the Available status.   Click on wordpressdb Writer database and write down the endpoint.   From Bastion Host, SSH to server wordpress-db.   Run the following command to create the wordpress user in your new Aurora database.\n  mysql -u admin -h \u0026lt;AURORA Endpoint\u0026gt; -p  Password: 12345678  Run the following commands to create the user wordpress.  CREATE USER \u0026#39;wordpress\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;12345678\u0026#39;;\rGRANT ALL ON wordpressdb.* TO \u0026#39;wordpress\u0026#39;@\u0026#39;%\u0026#39;;\rFLUSH PRIVILEGES;\rQUIT "
},
{
	"uri": "/2-prerequiste/2.1-createkeypair/",
	"title": "Create Key Pair ",
	"tags": [],
	"description": "",
	"content": "In this step, we will create a public key pair to provide for CloudFormation template when launching Bastion Host .The private potion of the key will be used to decrypt Bastion Host password later on to connect to the Bastion host using either SSM Fleet Manager or RDP client.\n  Go to Key Pair of region Oregon (us-west-2)\n  Click Create Key Pair.   At Name field, input FCJ-keypair.\n  At Key pair type, select RSA.\n  At Private key file format, select .pem.\n  Then click on Create key pair.   Check your key pair created successful.   Make sure that your key pair file had been downloaded automatically.\n\rOpen PuttyGen. If you did not download PuttyGen yet, follow here for more information. Click on File, then click on Load Private Key. Select file FCJ-keypair.pem you had downloaded.  Choose All file to see FCJ-keypair.pem.\n\rKeep blank at Key comment. Copy public key.  Save it for using later.  "
},
{
	"uri": "/3-discoveryexistinginfrastructure/3.1-enableathenaintegration/",
	"title": "Enable Athena integration ",
	"tags": [],
	"description": "",
	"content": "  Go to AWS Migration Hub.\n  Click on Discovery.\n  Click on Data collectors.\n  Choose Discovery agents tab.\n  Enable Athena export.   Check the \u0026ldquo;I understand costs will apply\u0026hellip;\u0026rdquo; button.\n  Then click the Enable button.   Enabling Athena export is processing. It will take several minutes to complete, we can proceed to the next steps.   "
},
{
	"uri": "/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Content  Introduce Prerequire  2.1 Create Key Pair 2.2 Launch CloudFormation template 2.3 Connect to Bastion Host 2.4 Explore environment 2.5 Create IAM credential   Discovering existing infrastructure  3.1 Enable Athena integration 3.2 Install ADS Agent to VMs 3.3 Browse discovered data 3.4 Viewing network connections 3.5 EC2 instance recommendations 3.6 Explore data using Athena   Migrating infrastructure  4.1 Migrating your application  4.1.1 Configure AWS MGN service 4.1.2 Configure default target templates 4.1.3 Create AWS replication agent IAM user 4.1.4 Install AWS replication agent 4.1.5 AWS MGN migration lifecycle 4.1.6 Launch test instance 4.1.7 Shutdown source environment 4.1.8 Launch cutover instance 4.1.9 Update DNS and validate the applications 4.1.10 Finalize Cutover and archive servers   4.2 Migrating your database  4.2.1 Create Aurora final target databases 4.2.2 Create replication subnet groups 4.2.3 Create a replication instance 4.2.4 Specify source and target endpoints 4.2.5 Create and monitor the tasks 4.2.6 Shut down source server and update DNS     Clean up resources  "
},
{
	"uri": "/4-migratinginfrastructure/4.1-migratingyourapplication/",
	"title": "Migrate infrastructure ",
	"tags": [],
	"description": "",
	"content": "MGN AWS Application Migration Service (AWS MGN) is a highly automated solution that simplifies, expedites, and reduces the cost of migrating and modernizing applications. It allows companies to migrate a large number of physical, virtual, and cloud servers without compatibility issues, performance disruption, or long cutover windows. AWS MGN continuously replicates source servers to your AWS account. When youâ€™re ready, it automatically converts and launches your servers on AWS so you can quickly benefit from the cost savings, productivity, resilience, and agility of the Cloud. In addition, AWS MGN allows you to modernize launched applications by running pre-configured actions.\nHow it works? Benefits of Application Migration Service include:  Cutover windows of minutes and no data loss. Large-scale migrations with no performance impact. Wide platform and source Operating Systems support. Automated migration to minimize IT resources and project length.  Content  4.1.1 Configure AWS MGN service 4.1.2 Configure default target templates 4.1.3 Create AWS replication agent IAM user 4.1.4 Install AWS replication agent 4.1.5 AWS MGN migration lifecycle 4.1.6 Launch test instance 4.1.7 Shutdown source environment 4.1.8 Launch cutover instance 4.1.9 Update DNS and validate the applications 4.1.10 Finnalize Cutover and archive servers  "
},
{
	"uri": "/",
	"title": "Migrating application using Migration Hub ",
	"tags": [],
	"description": "",
	"content": "Migrating application using Migration Hub Overview In this workshop we will perform discovery and migration of an emulated production environment running on a customer datacenter. The environment consists of 2 applications and 4 servers.\nAll the concepts applied in this migration exercise can also be applied to 10s, 100s or 1000s of server migrations.\nThis workshop uses an emulated on-premise environment with AWS EC2 servers, configured in a way that mimics a customers\u0026rsquo; environment, with private and public networks, DNS server, pre-installed applications and a bastion host.\nNow, we will discover and migrate the 4 servers from the on-premise emulated source environment to AWS.\nTo move forward with this workshop, it is required that the participants are familiar with:  Connecting to a Microsoft Windows Server using Remote Desktop Protocol (RDP) Connecting to Linux servers using Putty Basic Linux Bash commands Basic Windows PowerShell commands AWS Console Basic DNS and domain name resolution The following AWS Services (EC2, CloudFormation)  Materials needed:  A computer (Linux, Windows or Mac) Internet connectivity with outbound access to RDP protocol (TCP port 3389). A valid AWS Account  By the end of this workshop, you will:  Understand how migration projects works Discover servers and applications using AWS Application Discovery Service Group servers as applications using AWS Migration Hub Migrate servers with MGN Migrate databases with AWS Database Migration Service  The estimated cost in AWS resources for this lab are between USD$10 to USD$15 for a ~8 Hour lab duration. Make sure you terminate the CloudFormation and delete all the created resources during this lab after it\u0026rsquo;s completion.\n\r"
},
{
	"uri": "/4-migratinginfrastructure/4.1-migratingyourapplication/4.1.2-configuredefaulttargettemplates/",
	"title": "Configure default target template  ",
	"tags": [],
	"description": "",
	"content": "AWS MGN allows to set up default templates for target instances configuration, both for Launch Templates and Post-Launch settings . These templates will be applied to every new server added to the AWS MGN list of source servers, which happens after the AWS Replication Agent is installed on the source server.\nDefine default target instances configuration AWS MGN uses an EC2 Launch Template to define the configuration of the target EC2 instances to be launched during the test and cutover migration stages.\n  Under Settings, choose Launch template.\n  Click on Edit.   At General launch settings feature, uncheck Activate instance type right-sizing.\n  Check Transfer server tags.   At Default EC2 Launch Template feature, choose subnet TargetPublic at Default target subnet\n  Select security group name FCJ-MigrationHub-Workshop-SOURCENETWORK-XXXXXXXXXXXX-TargetSecurityGroup-XXXXXXXXXXXX at Additional security groups.\n  Select t3.small at Default instance type   Then, click on Save template.   Wait a second and make sure your changes are saved.   Define default post-launch integration for target instances AWS MGN uses Post-Launch Template configuration to define any post-launch automation actions to be executed on the target EC2 instances after successful launch of test/cutover instances. In this step we will use AWS MGN Post-Launch default template to configure integration with AWS Systems Manager with migrated servers. This will automatically enable AWS System Manager features such as Fleet Management, Inventory, Patch Management, Remote execution, execution of Automation documents.\n  Under Settings, choose Post-launch template.\n  Click on Edit.   Select the toggle saying Install the Systems Manager agent and allow executing actions on launched servers.\n  Keep Deployment option as Test and Cutover instances.\n  Then, click on Save template.   After we have configured the Post-Launch template to enable AWS System Manager Agent (SSM Agent) integration, other SSM automation documents can be triggered upon successful launch of test or cutover instances.   "
},
{
	"uri": "/4-migratinginfrastructure/4.2-migratingyourdatabase/4.2.2-createreplicaitonsubnetgroups/",
	"title": "Create replication subnet groups ",
	"tags": [],
	"description": "",
	"content": "To be able to launch a DMS Replication instance, it is necessary to specify what subnet group in the VPC the Replication instance will run. A subnet is a range of IP addresses in your VPC in a given Availability Zone. These subnets can be distributed among the Availability Zones for the AWS Region where your VPC is located. DMS Replication instance requires at least two Availability Zones. The following step will demonstrate how to create the subnet group in 2 Availability Zones.\n  Go to Subnet Groups of Database Migration Service.\n  Click on Create subnet group.   At Name, input WP-SubnetGroup.\n  At Description, input Migration Immersion Day - WordPress Subnet Group.\n  At VPC, select Source VPC.\n  At Add subnets, select SourcePrivate and SourcePrivateDB.\n  Then, click on Create subnet group.   Now, you have 1 subnet groups created: "
},
{
	"uri": "/3-discoveryexistinginfrastructure/3.2-installadsagenttovms/",
	"title": "Install ADS Agent to VMs ",
	"tags": [],
	"description": "",
	"content": "  Log in to Bastion Host same as step 10 of Connect to Bastion Host. Use Putty icon on the Bastion host desktop to connect to each server:\n   Application FQDN OS Username Password     wordpress-web wordpress-web.onpremsim.env Centos7 user 12345678   wordpress-db wordpress-db.onpremsim.env Centos7 user 12345678   ofbiz-web ofbiz-web.onpremsim.env Centos7 user 12345678   ofbiz-db ofbiz-db.onpremsim.env Centos7 user 12345678      Input FQDn of instance, then click Open   Enter user name user and password 12345678 (Root password you had created by CloudFormation template).   Download and install the agents as per the following instructions:\n  curl -o ./aws-discovery-agent.tar.gz https://s3-us-west-2.amazonaws.com/aws-discovery-agent.us-west-2/linux/latest/aws-discovery-agent.tar.gz\rtar -xzf aws-discovery-agent.tar.gz\rsudo bash install -r \u0026#34;us-west-2\u0026#34; -k \u0026#34;\u0026lt;AWS key id\u0026gt;\u0026#34; -s \u0026#34;\u0026lt;AWS key secret\u0026gt;\u0026#34; \rReplace \u0026lt; AWS key id \u0026gt; and \u0026lt; AWS key secret \u0026gt; with the information downloaded during the ADS user key creation step.\n\r Repeat the steps until all instances have the agent installed.\n  Once you have installed the Discovery Agent, data collection will start automatically. You can check collection status and other additional information on Discovery Agents tab of Data Collectors page of Migration Hub console. It may take several minutes for the agents to appear.\n\r  "
},
{
	"uri": "/2-prerequiste/2.2-lauchcloudformationtemplate/",
	"title": "Launch CloudFormation template ",
	"tags": [],
	"description": "",
	"content": "  Go to CloudFormaiton.\n  Click on Create stacks.   At Prepare template field, select Template is ready.\n  At Template source field, select Amazon S3 URL.\n  At Amazon S3 URL, input URL https://ws-assets-prod-iad-r-pdx-f3b3f9f1a7d6a3d0.s3.us-west-2.amazonaws.com/a033522c-f256-40f9-9ecb-5b76a71589bc/self-paced/MID.yaml .\n  Then, click on Next.   At Stack name field, input FCJ-MigrationHub-Workshop.\n  At RootPassword field, input 12345678.\n  At EC2KeyPairPublicKey field, input the public key pair which you had generated at step 13 of Create Key pair.   At LaunchWindows field, select TRUE and keep default at another fields.\n  Then, click on Next.   At Configure stack options interface, keep all at default and click Next.\n  At Review interface, check both options:\n I acknowledge that AWS CloudFormation might create IAM resources with custom names, and I acknowledge that AWS CloudFormation might require the following capability: CAPABILITY_AUTO_EXPAND    Click on Submit to launch stack deployment.   Verify the result, stack is launching.   It will take you about 20 minutes for stack created successfully.\n\rAfter stack is created, check and make sure there are 7 nested stack were created together.  FCJ-MigrationHub-Workshop-SOURCEBASTION-XXXXXXXXXXXXX FCJ-MigrationHub-Workshop-SOURCEWINDOWS-XXXXXXXXXXXX FCJ-MigrationHub-Workshop-SOURCEOFBIZ-XXXXXXXXXXXX FCJ-MigrationHub-Workshop-SOURCEWORDPRESS-XXXXXXXXXXXX FCJ-MigrationHub-Workshop-SOURCENETWORK-XXXXXXXXXXXXX FCJ-MigrationHub-Workshop-ADSIAM-XXXXXXXXXXXX FCJ-MigrationHub-Workshop-Tracker-XXXXXXXXXXXXX    "
},
{
	"uri": "/4-migratinginfrastructure/4.2-migratingyourdatabase/",
	"title": "Migrate your database ",
	"tags": [],
	"description": "",
	"content": "AWS Database Migration Services Now that you just finished to migrate your applications to AWS using MGN, let\u0026rsquo;s migrate the databases to run in Amazon Aurora using the AWS Database Migration Service tool.\nAWS Database Migration Service helps you migrate databases to AWS quickly and securely. The source database remains fully operational during the migration, minimizing downtime to applications that rely on the database. The AWS Database Migration Service can migrate your data to and from most widely used commercial and open-source databases.\nAWS Database Migration Service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle or Microsoft SQL Server to Amazon Aurora. With AWS Database Migration Service, you can continuously replicate your data with high availability and consolidate databases into a petabyte-scale data warehouse by streaming data to Amazon Redshift and Amazon S3.\nAmazon Aurora is a MySQL and PostgreSQL-compatible relational database built for the cloud, that combines the performance and availability of traditional enterprise databases with the simplicity and cost-effectiveness of open source databases.\nAmazon Aurora is up to five times faster than standard MySQL databases and three times faster than standard PostgreSQL databases. It provides the security, availability, and reliability of commercial databases at 1/10th the cost. Amazon Aurora is fully managed by Amazon Relational Database Service (RDS), which automates time-consuming administration tasks like hardware provisioning, database setup, patching, and backups.\nIn this section, you perform the following tasks:  Create Amazon Aurora database Migrate the existing database (running in EC2) to Aurora with AWS DMS Update the DNS records to reflect the migration  Content  4.2.1 Finnalize Cutover and archive servers 4.2.2 Create replication subnet groups 4.2.3 Create a replication instance 4.2.4 Specify source and target endpoints 4.2.5 Create and monitor the tasks 4.2.6 Shut down source server and update DNS  "
},
{
	"uri": "/2-prerequiste/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "Content  2.1 Create Key Pair 2.2 Launch CloudFormation template 2.3 Connect to Bastion Host 2.4 Explore environment 2.5 Create IAM credential  "
},
{
	"uri": "/3-discoveryexistinginfrastructure/3.3-browsediscovereddata/",
	"title": "Browse discovered data ",
	"tags": [],
	"description": "",
	"content": " In the Migration Hub navigation pane, choose Discover. Choose Servers. The discovered servers appear in the servers list.  It takes approximately 15 minutes for agents to start collecting data.\n\rFor more detail about a server, choose its server link in the Server info column. Doing so displays a screen that describes the server details, such as OS, Memory, CPU, Performance Information, etc.   The server\u0026rsquo;s detail screen displays system information and performance metrics. "
},
{
	"uri": "/2-prerequiste/2.3-connecttobastionhost/",
	"title": "Connect to Bastion Host ",
	"tags": [],
	"description": "",
	"content": "  Go to EC2 instances.\n  Select instance name MID-Bastion.\n  Click on Connect.   At Connect to instance interface, select RDP client.\n  Click on Download remote desktop file.\n  Click on Get password.   Make sure that file name MID-Bastion.rdp was downloaded successful.\n\r At Get Windows password interface, click on Upload private key file.\n  Then, click on Decrypt password.   Password was generated.   Open file MID-Bastion.rdp with password above.\n  Congratulation! You connected to Bastion Host successfully.\n"
},
{
	"uri": "/4-migratinginfrastructure/4.2-migratingyourdatabase/4.2.3-createareplicationinstance/",
	"title": "Create a replication instance ",
	"tags": [],
	"description": "",
	"content": "Your first task in migrating a database is to create a replication instance that has sufficient storage and processing power to perform the tasks you assign and migrate data from your source database to the target database. The required size of this instance varies depending on the amount of data you need to migrate and the tasks that you need the instance to perform.\n  Go to Replication instances of Database Migration Service.\n  Click on Create replication instance.   At Name, input MID-REPINST-WP.\n  At Description, input Migration Immersion Day - Rep Inst WordPress.\n  At Instance class, select dms.t3.medium.\n  At Engine version, select version 3.5.2 or its latest.\n  At Multi AZ, select Dev or Test workload (Single-AZ)   At Virtual private cloud (VPC) for IPv4, select Source.\n  At Replication subnet group, select WP-SubnetGroup.\n  Uncheck Public accessible.\n  Expand Advanced settings.\n  At Availability zone, select us-west-2a.\n  At VPC security groups, select default and FCJ-MigrationHub-Workshop-SOURCENETWORK-XXXXXXXXXXXX-SourceSecurityGroup-XXXXXXXXXXXXX.   Then, click on Create replication instance. Now, wait for status \u0026ldquo;Available\u0026rdquo; in the Replication instance that you just created:   "
},
{
	"uri": "/4-migratinginfrastructure/4.1-migratingyourapplication/4.1.3-createawsreplicationagentiamuser/",
	"title": "Create AWS Replication Agent IAM user ",
	"tags": [],
	"description": "",
	"content": "The AWS Replication Agent (MGN agent) that will be installed on the source servers requires IAM permissions in order to register the source machine with AWS MGN. In this step we will create the required IAM user that will be used by AWS Replication Agent in the next steps.\n  Go to IAM. Select User feature.\n  Click on Create user.   Input user name MGNuser.\n  Click on Next.   At Permissions options, select Attach policies directly.\n  At Permissions policies, search and select policy name AWSApplicationMigrationAgentInstallationPolicy.\n  Then, click on Next.   Review and click on Create user.   Click View user, choose Security credentials tab.\n  Click on Create credential.   Choose Application running outside AWS.\n  Then, click on Next.   Next, click on Create access key.   Download your credential file by clicking on Download .csv file.   "
},
{
	"uri": "/3-discoveryexistinginfrastructure/",
	"title": "Discovery existing infrastructure ",
	"tags": [],
	"description": "",
	"content": "Overview AWS Application Discovery Service helps enterprise customers plan migration projects by gathering information about their on-premises data centers.\nThe AWS Application Discovery Agent is software that you install on on-premises servers and VMs targeted for discovery and migration. Agents capture system configuration, system performance, running processes, and details of the network connections between systems. Agents support most Linux and Windows operating systems, and you can deploy them on physical on-premises servers, Amazon EC2 instances, and virtual machines.\nThe Discovery Agent runs in your local environment and requires root privileges. When you start the Discovery Agent, it registers with the Application Discovery Service endpoint, arsenal-discovery..amazonaws.com, and pings the service at 15 minute intervals for configuration information. When you send a command that tells an agent to start data collection, it starts collecting data for the host or VM where it resides. Collection includes system specifications, times series utilization or performance data, network connections, and process data. You can use this information to map your IT assets and their network dependencies. All of these data points can help you determine the cost of running these servers in AWS and also plan for migration.\nData is transmitted securely by the Discovery Agents to Application Discovery Service using Transport Layer Security (TLS) encryption. Agents are configured to upgrade automatically when new versions become available. You can change this configuration setting if desired.\nContent  3.1 Enable Athena integration 3.2 Install ADS Agent to VMs 3.3 Browse discovered data 3.4 Viewing network connections 3.5 EC2 instance recommendations 3.6 Explore data using Athena  "
},
{
	"uri": "/2-prerequiste/2.4-exploreenvironment/",
	"title": "Explore environment ",
	"tags": [],
	"description": "",
	"content": "The current production environment running on-premise is comprised of 2 applications and 4 servers as per the following:    Application Hostname FQDN OS Platform     Wordpress wordpress-web wordpress-web.onpremsim.env Centos7 Apache+PHP   Wordpress wordpress-db wordpress-db.onpremsim.env Centos7 MariaDB   OFBiz ofbiz-web ofbiz-web.onpremsim.env Centos7 Java   OFBiz ofbiz-db ofbiz-db.onpremsim.env Centos7 PostgreSQL      Test the applications that weâ€™re going to migrate. In the Bastion Host, open the following URL using Chrome browser.\n   Application URL     Wordpress http://wordpress-web.onpremsim.env/   OFBiz ERP https://ofbiz-web.onpremsim.env:8443/accounting      You should be able to visualize these 2 web applications: ###[Wordpress   OFBiz You can log into the OFBiz application using the following username and password:\n   Application Test URL App username App password     OFBiz ERP https://ofbiz-web.onpremsim.env:8443/accounting admin ofbiz    "
},
{
	"uri": "/4-migratinginfrastructure/4.1-migratingyourapplication/4.1.4-installawsreplicationagent/",
	"title": "Install AWS Replication Agent ",
	"tags": [],
	"description": "",
	"content": "AWS Application Migration Service replicates data to AWS using an agent that must be installed on the source server.\n  Go to Source server of Application Migration Service.\n  Click on Add server.   At Select your operating system, choose Linux.\n  At IAM access key ID, input IAM access key ID of user MGNuser.\n  At IAM secret access key, input IAM secret access key of user MGNuser.\n  Copy command at section 5 and 6.   Now we will go to Bastion Host to install agent into instances. 7. Log in to Bastion Host 8. Use Putty in Bastion Host to SSH to instances. 9. SSH to Offbiz-web and Offbiz-db.\n Log in: user Password: 12345678   Run the command you had copied at step 6. Installing an agent on each of the servers will take about 3-5 mins. Once agent is installed, you will see the final The AWS Replication Agent was successfully installed message in the SSH terminals.   Also, you will see the servers added in the AWS Application Service console under Source Servers list in the initialization stage. "
},
{
	"uri": "/4-migratinginfrastructure/",
	"title": "Migrate infrastructure ",
	"tags": [],
	"description": "",
	"content": "After discovering and receiving recommendations your existing infrastructure, we will perform migrate it in AWS without downtime.\nContent  4.1 Migrating your application 4.2 Migrating your database  "
},
{
	"uri": "/4-migratinginfrastructure/4.2-migratingyourdatabase/4.2.4-specifysourceandtargetendpoints/",
	"title": "Specify source and target endpoint ",
	"tags": [],
	"description": "",
	"content": "While your replication instance is being created, you can specify the source and target data stores. The source and target data stores can be on an Amazon Elastic Compute Cloud (Amazon EC2) instance, an Amazon Relational Database Service (Amazon RDS) DB instance, or an on-premises database.\nCreate Source endpoint   Go to EC2 instances.\n  Filter with MID-Wordpress-DB.\n  Save the Private IPv4 address.   Go to Endpoint of Database Migration Services.\n  Click on Create endpoint.   At Endpoint identifier, input SourceWordpress.\n  At Source engine, select MariaDB.\n  Click on Provide Access Information Manually.\n  At Server name, input the IP address that you saved in step 3.\n  At Port, enter 3306.\n  At User name, input wordpress.\n  At Password, input 12345678.   Expand Test endpoint connection.\n  At VPC, select Source VPC.\n  At Replication Instance, select mid-repinst-wp.\n  Click on Run test.\n  After the successful status, click on Create endpoint.   Create Target endpoint   Click on Create endpoint.   At Endpoint type, select Target endpoint.\n  Check box Select RDS DB instance.\n  Select the RDS Instance name mid-wordpress-instance-1.\n  At Endpoint identifier, input TargetWordpress.\n  At Target engine, select Amazon Aurora MySQL.\n  At Access to endpoint database, select Provide access information manually.   At Password, input 12345678.\n  Expand Test endpoint connection.\n  At VPC, select Target VPC.\n  At Replication Instance, select mid-repinst-wp.\n  Click on Run test.\n  After the successful status, click on Create endpoint.   At the end, you should have 1 Source and 1 Target, in a total of 2 endpoints:\n   Type Engine     Source MariaDB   Target Amazon Aurora MySQL    "
},
{
	"uri": "/3-discoveryexistinginfrastructure/3.4-viewingnetworkconnections/",
	"title": "Viewing network connections ",
	"tags": [],
	"description": "",
	"content": "Viewing network connections in AWS Migration Hub allows you to visualize a server\u0026rsquo;s dependencies. The visualization of these dependencies helps you verify all of the resources required to successfully migrate each of your applications to Amazon Web Services.\nYou view network connections by using the network diagram. When using the network diagram, you can visually review large amounts of data to understand what server dependencies exist. Understanding these server dependencies helps you plan how to group together the needed resources to support an application for migration to AWS.\n  At Server feature of Migration Hub.\n  Select all the server then click Visualize network.   Since we selected all servers, you will see a diagram depicting how they are all interrelated, it may take a few minutes for the interrelations to be updated.   It may be overwhelming in some environments to see the whole network on the same diagram. Let\u0026rsquo;s go back to the Server list tab and select the wordpress-web server to look at more closely. Select the instance and click the Network tab.   The icon for the server you choose is centered in the network diagram. Connections fan out from the center server to servers that are directly connected to the server you choose.   We now clearly see that this server has a dependencey with the wordpress-db server. Additoinally, we can notice that it is also communicating with 192.168.0.246 (the Bastion server) and 192.168.1.250 (DNS server).\n We will want to group wordpress-web and wordpress-db together as they comprise the front and backend of the application. Go back to the Server list tab and select those 2 servers.\n  Then click Group as application.   Choose Group as a new application.\n  Input Application name Wordpress.\n  Click Group.   Create an application group for the ofbiz application comprised of the 2 ofbiz servers.   For actual production migration it is recommended that the Discovery Agent server data should be collected for two to six weeks before you can use the network diagram to view established connection patterns.\n\r"
},
{
	"uri": "/4-migratinginfrastructure/4.1-migratingyourapplication/4.1.5-awsmgnmigrationlifecycle/",
	"title": "AWS MGN migration lifecycle ",
	"tags": [],
	"description": "",
	"content": "Now you can monitoring replication progress to know when your migration completed by AWS MGN Migration Life Cycle.\n  Click on Source server name name ofbiz-web.onpremsim.env.   Now, the migration progress of this instance is in Not ready step.   The Lifecycle view shows the current state of each server within the migration lifecycle. And there are 6 states in the migration lifecycle:\n Not ready - The server is undergoing the Initial Sync process and is not yet ready for testing. This process might take a few hours to a few days depending on the network bandwidth and size of the source server. Ready for testing - The server has been successfully added to Application Migration Service and Initial Sync has completed. Test or Cutover instances can now be launched for this server. Test in progress - A Test instance is currently being launched for this server. Note there\u0026rsquo;s a link to the Job ID of the launch job that is associated with the launch of this instance. Ready for cutover - This server has been tested and is now ready for a Cutover instance to be launched. Cutover in progress - A Cutover instance is currently being launched for this server. Note there\u0026rsquo;s a link to the Job ID of the new launch job that is associated with the launch of this instance. Cutover complete - This server\u0026rsquo;s migration has been complete. All of the resources associated with migration of this server have been cleaned up.  "
},
{
	"uri": "/5-cleanup/",
	"title": "Cleanup resources ",
	"tags": [],
	"description": "",
	"content": "DMS Tasks  Go to Database migration tasks. Select the tasks that contains wordpress in the name, click on Actions and Delete. After, click Delete again to confirm.  DMS Endpoints  Go to DMS endpoint. Select all endpoints where name contains wordpress, click on Actions and Delete. After, click Delete again to confirm.  DMS Replication Instances  Go to DMS replication instances. Select all Replication Instances where name starts with mid and contains wordpress, click on Actions and Delete. After, click Delete again to confirm.  DMS Subnet Groups  Go to DMS subnet groups. Select all Subnet Groups where name contains wordpress, click on Actions and Delete. After, click Delete again to confirm.  RDS WordPress  Go to RDS. Expand mid-wordpress and select the Writer instance. After, go to Actions and select Delete. As this is a lab, we will not create a final snapshot. But, in a real environment, it\u0026rsquo;s a good idea. And then, to confirm the deletion, type delete me and click delete.  Onprem EC2 Instances (MGN and DMS)  Go to EC2. Add MID , onpremsim.env and MGN as a filters. Then, select all servers listed by the filter. Click on Actions, click on Instance State and click on Terminate.  CloudFormation  Go to CloudFormation. Select stack name FCJ-MigrationHub-Workshop, and click Delete. If there are some issue, perform manually deletion for each stacks.  Volume and snapshot  Go to EBS Volume and EBS Snapshot. Select and perform deletion snapshots and volumes created by MGN for the related servers used on this workshop.  "
},
{
	"uri": "/4-migratinginfrastructure/4.2-migratingyourdatabase/4.2.5-createandmonitorthetasks/",
	"title": "Create and monitor the tasks ",
	"tags": [],
	"description": "",
	"content": "An AWS Database Migration Service (AWS DMS) task is where all the work happens. You specify what tables (or views) and schemas to use for your migration and any special processing, such as logging requirements, control table data, and error handling.\nWhen creating a migration task, you need to know several things:\n Before you can create a task, you must create a source endpoint, a target endpoint, and a replication instance. You can specify many task settings to tailor your migration task. You can set these by using the AWS Management Console, AWS Command Line Interface (AWS CLI), or AWS DMS API. These settings include specifying how migration errors are handled, error logging, and control table information. After you create a task, you can run it immediately. The target tables with the necessary metadata definitions are automatically created and loaded, and you can specify ongoing replication. By default, AWS DMS starts your task as soon as you create it. However, in some situations, you might want to postpone the start of the task. For example, when using the AWS CLI, you might have a process that creates a task and a different process that starts the task based on some triggering event. As needed, you can postpone your task\u0026rsquo;s start. You can monitor, stop, or restart tasks using the AWS DMS console, AWS CLI, or AWS DMS API.  Create your task   Go to Database migration tasks.\n  Click on Create task.   At Task identifier, input WordPress-MySQL-to-Aurora.\n  At Replication instance, select mid-repinst-wp.\n  At Source database endpoint, select sourcewordpress.\n  At Target database endpoint, select targetwordpress.\n  At Migration Type, select Migrating existing data.   In Table mappings feature, select Wizard at Editing mode.\n  Click on Add new selection data.\n  At Schema, select Enter a schema.\n  At Schema name, select %.\n  At Table name, select %.\n  At Action, select Include.   Then, click on Create task.   Now, your replication from the EC2 database instance to Aurora MySQL is running and the data started to be replicated.   Monitor your task Now that your migration tasks are running, we have to monitor them and wait until the status Load complete. "
},
{
	"uri": "/2-prerequiste/2.5-createiamcredential/",
	"title": "Create IAM credential ",
	"tags": [],
	"description": "",
	"content": "  Go to IAM User.\n  Click to user name ADSUser.\n  Select Security Credentials.\n  Click on Create Access Key.   At Use case field, select Command Line Interface (CLI).\n  Check box at Confirmation.\n  Then, click on Next.   Input the description Access key for FCJ workshop.\n  Click on Create access key.   Download the .csv file and rename as ADSUser.csv as the information on this file will be used later.   Make sure that credential file was downloaded successfully.\n\r"
},
{
	"uri": "/3-discoveryexistinginfrastructure/3.5-ec2instancerecommendations/",
	"title": "EC2 instnace recommendations ",
	"tags": [],
	"description": "",
	"content": "Let us explore the EC2 instance recommendation feature in Migration Hub to estimate the cost of running your existing servers in AWS. This feature analyzes the details about each server, including server specification, CPU, and memory utilization data. The compiled data is then used to recommend the least expensive Amazon EC2 instance type that can handle the existing performance workload.\nPrerequisites Before you can get Amazon EC2 instance recommendations, you must have data about your on-premises servers in Migration Hub. This data can come from the discovery tools (AWS Application Discovery Agent or Application Discovery Service Agentless Collector) or from Migration Hub import. For the purpose of this lab we going to use Application Discovery Agent.\nOverview of the 3 options:  AWS Application Discovery Agent is software that you install on on-premises servers and VMs targeted for discovery and migration. Agents support most Linux and Windows operating systems, and you can deploy them on physical on-premises servers, Amazon EC2 instances, and virtual machines. Application Discovery Service Agentless Collector is an on-premises application that collects information through agentless methods about your on-premises environment. You install the Agentless Collector as a virtual machine (VM) in your VMware vCenter Server environment using an Open Virtualization Archive (OVA) file. AWS Migration Hub (Migration Hub) import allows you to import details of your on-premises environment directly into Migration Hub without using the Agentless Collector or Discovery Agent, so you can perform migration assessment and planning directly from your imported data. You also can group your devices as applications and track their migration status.  Generating Amazon EC2 Recommendations:   Go to Migration Hub.\n  At Asset feature. Choose EC2 instance recommendations .   At EC2 instance recommendations interface, choose Average utilization under Sizing preferences.\n  Choose US West (Oregon) at Region.\n  Choose Shared instances at Tenancy.\n  Choose On-Demand at Pricing model.\n  Then, click on Export recommendations.   When the process is complete, your browser will automatically download a compressed archive (ZIP) file, containing a comma-separated values (CSV) file with your recommendations.\n  Checking recommendation file, there are analysis and recommendations for your systems. Example: When checking column P name Recommendation.EC2.Instance.Model, it recommend the model for each instance can be at least suitable with this system.\n   Server.HostName Current model Recommendation model     ofbiz-db.onpremsim.env t3.small t3a.nano   ofbiz-web.onpremsim.env t3.medium t3a.medium   wordpress-web.onpremsim.env t3.small t3a.micro   wordpress-db.onpremsim.env t3.small t3a.nano      The results of this analysis only provide recommendations and do not obligate you to any further actions. Selections and preferences for your EC2 instance(s) are made at your sole discretion.\n\r"
},
{
	"uri": "/3-discoveryexistinginfrastructure/3.6-exploredatausingathena/",
	"title": "Explore data using Athena ",
	"tags": [],
	"description": "",
	"content": "Once you have enabled Data Exploration in Amazon Athena, you can begin exploring and working with current, detailed data discovered by your agents in Amazon Athena. You can query this data directly in Athena to do such things as generate spreadsheets, run a cost analysis, port the query to a visualization program to diagram network dependencies, and more.\nUnderstand ADS Database in Athena   Go to Server of Migration Hub.\n  Click on Actions button.\n  Then click View in Amazon Athena.   At Query editor interface, select tab Settings.   Then, click on Manage.   At Manage settings interface, click on Browse S3.   Select the S3 bucket name aws-application-discovery-service-xxxxxxxxxxxxxxxxxxxxxxxxx.\n  Then, click on Choose.   Then, click Save.   On the Editor tab, in the navigation pane under Database, make sure that application_discovery_service_database is selected.   Under Tables the following tables represent the datasets grouped by the agents.\n   os_info_agent network_interface_agent sys_performance_agent processes_agent inbound_connection_agent outbound_connection_agent id_mapping_agent   Explore discovered data with pre-built queries.  Place your code in Athena\u0026rsquo;s Query Editor window and paste the query. Choose Run to see the result.  CREATE OR REPLACE VIEW hostname_ip_helper AS\rSELECT DISTINCT\r\u0026#34;os\u0026#34;.\u0026#34;host_name\u0026#34;\r, \u0026#34;nic\u0026#34;.\u0026#34;agent_id\u0026#34;\r, \u0026#34;nic\u0026#34;.\u0026#34;ip_address\u0026#34;\rFROM\ros_info_agent os\r, network_interface_agent nic\rWHERE (\u0026#34;os\u0026#34;.\u0026#34;agent_id\u0026#34; = \u0026#34;nic\u0026#34;.\u0026#34;agent_id\u0026#34;);  To see what this query looks like, locate the Views section under your Tables.\n  Click the 3-dot menu and select Preview View.   See the result.   Identify Servers With or Without Agents This query can help you perform data validation. If you\u0026rsquo;ve deployed agents on a number of servers in your network, you can use this query to understand if there are other servers in your network without agents deployed on them. In this query, we look into the inbound and outbound network traffic, and filter the traffic for private IP addresses, only. That is, IP addresses starting with 192, 10, or 172.\nSELECT DISTINCT \u0026#34;destination_ip\u0026#34; \u0026#34;IP Address\u0026#34; ,\r(CASE\rWHEN (\r(SELECT \u0026#34;count\u0026#34;(*)\rFROM network_interface_agent\rWHERE (\u0026#34;ip_address\u0026#34; = \u0026#34;destination_ip\u0026#34;) ) = 0) THEN\r\u0026#39;no\u0026#39;\rWHEN (\r(SELECT \u0026#34;count\u0026#34;(*)\rFROM network_interface_agent\rWHERE (\u0026#34;ip_address\u0026#34; = \u0026#34;destination_ip\u0026#34;) ) \u0026gt; 0) THEN\r\u0026#39;yes\u0026#39; END) \u0026#34;agent_running\u0026#34;\rFROM outbound_connection_agent\rWHERE (((\u0026#34;destination_ip\u0026#34; LIKE \u0026#39;192.%\u0026#39;)\rOR (\u0026#34;destination_ip\u0026#34; LIKE \u0026#39;10.%\u0026#39;))\rOR (\u0026#34;destination_ip\u0026#34; LIKE \u0026#39;172.%\u0026#39;))\rUNION\rSELECT DISTINCT \u0026#34;source_ip\u0026#34; \u0026#34;IP ADDRESS\u0026#34; ,\r(CASE\rWHEN (\r(SELECT \u0026#34;count\u0026#34;(*)\rFROM network_interface_agent\rWHERE (\u0026#34;ip_address\u0026#34; = \u0026#34;source_ip\u0026#34;) ) = 0) THEN\r\u0026#39;no\u0026#39;\rWHEN (\r(SELECT \u0026#34;count\u0026#34;(*)\rFROM network_interface_agent\rWHERE (\u0026#34;ip_address\u0026#34; = \u0026#34;source_ip\u0026#34;) ) \u0026gt; 0) THEN\r\u0026#39;yes\u0026#39; END) \u0026#34;agent_running\u0026#34;\rFROM inbound_connection_agent\rWHERE (((\u0026#34;source_ip\u0026#34; LIKE \u0026#39;192.%\u0026#39;)\rOR (\u0026#34;source_ip\u0026#34; LIKE \u0026#39;10.%\u0026#39;))\rOR (\u0026#34;source_ip\u0026#34; LIKE \u0026#39;172.%\u0026#39;)); Analyze System Performance Data for Servers With Agents You can use this query to analyze system performance and utilization pattern data for your on-premises servers that have agents installed on them. The query combines the system_performance_agent table with os_info_agent table to identify the hostname for each server. This query returns the time series utilization data (in 15 minute intervals) for all the servers where agents are running.\nSELECT \u0026#34;OS\u0026#34;.\u0026#34;os_name\u0026#34; \u0026#34;OS Name\u0026#34; ,\r\u0026#34;OS\u0026#34;.\u0026#34;os_version\u0026#34; \u0026#34;OS Version\u0026#34; ,\r\u0026#34;OS\u0026#34;.\u0026#34;host_name\u0026#34; \u0026#34;Host Name\u0026#34; ,\r\u0026#34;SP\u0026#34;.\u0026#34;agent_id\u0026#34; ,\r\u0026#34;SP\u0026#34;.\u0026#34;total_num_cores\u0026#34; \u0026#34;Number of Cores\u0026#34; ,\r\u0026#34;SP\u0026#34;.\u0026#34;total_num_cpus\u0026#34; \u0026#34;Number of CPU\u0026#34; ,\r\u0026#34;SP\u0026#34;.\u0026#34;total_cpu_usage_pct\u0026#34; \u0026#34;CPU Percentage\u0026#34; ,\r\u0026#34;SP\u0026#34;.\u0026#34;total_disk_size_in_gb\u0026#34; \u0026#34;Total Storage (GB)\u0026#34; ,\r\u0026#34;SP\u0026#34;.\u0026#34;total_disk_free_size_in_gb\u0026#34; \u0026#34;Free Storage (GB)\u0026#34; ,\r(\u0026#34;SP\u0026#34;.\u0026#34;total_disk_size_in_gb\u0026#34; - \u0026#34;SP\u0026#34;.\u0026#34;total_disk_free_size_in_gb\u0026#34;) \u0026#34;Used Storage\u0026#34; ,\r\u0026#34;SP\u0026#34;.\u0026#34;total_ram_in_mb\u0026#34; \u0026#34;Total RAM (MB)\u0026#34; ,\r(\u0026#34;SP\u0026#34;.\u0026#34;total_ram_in_mb\u0026#34; - \u0026#34;SP\u0026#34;.\u0026#34;free_ram_in_mb\u0026#34;) \u0026#34;Used RAM (MB)\u0026#34; ,\r\u0026#34;SP\u0026#34;.\u0026#34;free_ram_in_mb\u0026#34; \u0026#34;Free RAM (MB)\u0026#34; ,\r\u0026#34;SP\u0026#34;.\u0026#34;total_disk_read_ops_per_sec\u0026#34; \u0026#34;Disk Read IOPS\u0026#34; ,\r\u0026#34;SP\u0026#34;.\u0026#34;total_disk_bytes_written_per_sec_in_kbps\u0026#34; \u0026#34;Disk Write IOPS\u0026#34; ,\r\u0026#34;SP\u0026#34;.\u0026#34;total_network_bytes_read_per_sec_in_kbps\u0026#34; \u0026#34;Network Reads (kbps)\u0026#34; ,\r\u0026#34;SP\u0026#34;.\u0026#34;total_network_bytes_written_per_sec_in_kbps\u0026#34; \u0026#34;Network Write (kbps)\u0026#34;\rFROM \u0026#34;sys_performance_agent\u0026#34; \u0026#34;SP\u0026#34; , \u0026#34;OS_INFO_agent\u0026#34; \u0026#34;OS\u0026#34;\rWHERE (\u0026#34;SP\u0026#34;.\u0026#34;agent_id\u0026#34; = \u0026#34;OS\u0026#34;.\u0026#34;agent_id\u0026#34;) limit 10; "
},
{
	"uri": "/4-migratinginfrastructure/4.1-migratingyourapplication/4.1.6-launchtestinstance/",
	"title": "Launch test instance ",
	"tags": [],
	"description": "",
	"content": "  Once server status changed to Ready for testing on AWS Application Migration Service console. You can perform testing on that server.   Select instance to launch in test mode.\n  Click Test and Cutover.\n  Then, select Launch Test Instance.   Click on Launch.   This will change the Migration Lifecycle Status to Test in progress.   Click to ofbiz-db.onpremsim.env and see testing job is starting.\n  Click on Job ID.   Demonstrate Job log to see the detail.   Once launch job completes, you should see the actual status of each server\u0026rsquo;s launch result in the Source servers.   After performing all necessary testing procedures on these new test instances, select all 2 servers.\n  Choose Test and cutover.\n  Then mark them as Ready for Cutover.   Click on Continue.   The Migration lifecycle status changed to Ready for cutover.   As all the testing has been finished and servers are marked as Ready for cutover, move to the next step to finalize any changes in the source environment before the final cutover.\n"
},
{
	"uri": "/4-migratinginfrastructure/4.1-migratingyourapplication/4.1.7-shutdownsourceenvironment/",
	"title": "Shut down source environment ",
	"tags": [],
	"description": "",
	"content": "In a real-world application migration, once you have completed all of your testing and are ready to fully transition your machines to the cloud, you should perform the shutdown and termination of the source servers and update the DNS records properly to reflect the new servers running in the cloud.\n From Bastion host, connect to ofbiz-web and ofbiz-db server using SSH. Shutdown the source servers running in the on-premises environment as per the following instructions:  sudo shutdown -h now After the source environment is stopped, all final changes from the source systems are replicated to the Staging area, and we are ready for the final cutover.\nGo to Source servers. Note that in the Alert column the status will change to Lagging after source systems have been shut down.  After a few minutes, both Alerts and Data replication status columns will change servers\u0026rsquo; status into Stalled. This is expected as we have stopped all source serves and the replication process has been interrupted. However, all the data from source servers is fully synced to the EBS volumes in the Staging area, and now the final cutover servers, when launched, will have the latest data from the source systems.\n"
},
{
	"uri": "/4-migratinginfrastructure/4.1-migratingyourapplication/4.1.8-launchcutoverinstance/",
	"title": "Launch cutover instance ",
	"tags": [],
	"description": "",
	"content": "  Once servers are in Ready for cutover status, select all 2 servers to start cutover.\n  Choose Test and Cutover on top right drop down.\n  Then under Cutover section, choose Launch cutover instances.   Click on Launch.   Migration lifecycle status changes to Cutover in progress.\n  For more detail, click on View job details.   Wait 10 - 15 minutes, the Status of Source server name will be Launched. Now, as all the servers have been launched as new cutover instances, we need to validate the applications in the new environment.\n  "
},
{
	"uri": "/4-migratinginfrastructure/4.1-migratingyourapplication/4.1.9-updatednsandvalidatetheapplications/",
	"title": "Update DNS and validate the applications",
	"tags": [],
	"description": "",
	"content": "Now that the OFbiz source servers are shutdown, it\u0026rsquo;s time to update the DNS records to reflect the new servers that have just been migrated. In this lab we use an instance running a version of Unix bind/named as the DNS resolver.\n  Go to EC2 instances.\n  Filter ofbiz, and Instance state is running.\n  Save Private IPv4 addresses of two servers ofbiz-db.onpremsim.env and ofbiz-web.onpremsim.env.   From the Bastion host, use Putty to connect to the new IP address.\n   Log in: user Password: 12345678   Run the following command to update the DNS record:  ADDR=`hostname -I`\rHOST=`hostname`\rsudo touch /tmp/nsupdate.txt\rsudo chmod 666 /tmp/nsupdate.txt\recho \u0026#34;server dns.onpremsim.env\u0026#34; \u0026gt; /tmp/nsupdate.txt\recho \u0026#34;update delete $HOST A\u0026#34; \u0026gt;\u0026gt; /tmp/nsupdate.txt\recho \u0026#34;update add $HOST 86400 A $ADDR\u0026#34; \u0026gt;\u0026gt; /tmp/nsupdate.txt\recho \u0026#34;update delete $HOST PTR\u0026#34; \u0026gt;\u0026gt; /tmp/nsupdate.txt\recho \u0026#34;update add $HOST 86400 PTR $ADDR\u0026#34; \u0026gt;\u0026gt; /tmp/nsupdate.txt\recho \u0026#34;send\u0026#34; \u0026gt;\u0026gt; /tmp/nsupdate.txt\rsudo nsupdate /tmp/nsupdate.txt Repeat the DNS update process with remaining server.  Using Windows PowerShell of Bastion Host to run those command for performing testing new DNS of servers.  nslookup ofbiz-web.onpremsim.env\rnslookup ofbiz-db.onpremsim.env You can see, returned IP Address is Private IP Address of each instance.\nNow you can test the OfBiz that have just been migrated. They are running in AWS now. Open the following URL using Chrome.   URL: https://ofbiz-web.onpremsim.env:8443/accounting App username: admin App password: ofbiz  "
},
{
	"uri": "/4-migratinginfrastructure/4.1-migratingyourapplication/4.1.10-finalizecutoverandarchiveservers/",
	"title": "Finalize cutover and archive servers ",
	"tags": [],
	"description": "",
	"content": "Finalize the cutover When the cutover process is completed and you no longer need the replicated data in the Staging area, you can finalize the cutover. This will remove all the resources created during the migration and clean up the Staging area.\n  Go to Source servers.\n  Select two servers.\n  Click on Test and cutover.\n  Choose Finalize cutover.   Click on Finalize.   The Migration lifecycle status changed to Cutover complete, Data replication status changed to Disconnected, and Alerts column shows the last alert as Launched.   Now as all servers have been cutover and finalized, you can archive servers to remove them from the list of Active source servers\nArchive Already Migrated Servers You can now archive your source servers that have launched Cutover instances. Archiving will remove these source servers from the main Source Servers page, allowing you to focus on source servers that have not yet been cutover. You will still be able to access the archived servers through filtering options.\n  Select two servers.\n  Click on Action.\n  Choose Mark as archived.   Click on Archive.   To see your archived servers, open upper left drop-down menu and select Archived source servers.   "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/4-migratinginfrastructure/4.2-migratingyourdatabase/4.2.6-shutdownsourceserverandupdatedns/",
	"title": "Shutdown source server and upadte DNS ",
	"tags": [],
	"description": "",
	"content": "Now that all databases have been migrated to Aurora, it\u0026rsquo;s time to update the DNS information so the application server can connect to the related Aurora database server. Both apps are using a DNS entry as a connection hostname. In a real-world application migration, once you have completed all of your testing and are ready to fully transition your databases to Aurora, you should perform the shutdown of the source servers and update the DNS records properly to reflect the new database servers running in Aurora.\n From Bastion Host, SSH to instance name wordpress-db. Check the current database DNS record running following command from the putty terminal:  nslookup wordpress-db Let\u0026rsquo;s create a variable (ADDR) using the RDS endpoint. See again at step 25 of Finnalize Cutover and archive servers.  ADDR=\u0026#34;\u0026lt;REPLACE THIS WITH WORDPRESS ENDPOINT\u0026gt;\u0026#34; Then, run the following commands to update the DNS record:  HOST=\u0026#34;wordpress-db.onpremsim.env\u0026#34;\rsudo touch /tmp/nsupdate.txt\rsudo chmod 666 /tmp/nsupdate.txt\recho \u0026#34;server dns.onpremsim.env\u0026#34; \u0026gt; /tmp/nsupdate.txt\recho \u0026#34;update delete $HOST A\u0026#34; \u0026gt;\u0026gt; /tmp/nsupdate.txt\recho \u0026#34;update delete $HOST PTR\u0026#34; \u0026gt;\u0026gt; /tmp/nsupdate.txt\recho \u0026#34;update add $HOST 86400 CNAME $ADDR.\u0026#34; \u0026gt;\u0026gt; /tmp/nsupdate.txt\recho \u0026#34;send\u0026#34; \u0026gt;\u0026gt; /tmp/nsupdate.txt\rsudo nsupdate /tmp/nsupdate.txt Verify the DNS name resolution again.  nslookup wordpress-db It was updated to a CNAME pointing to your Aurora database (compare the output with the previous step).\nShutdown the source database server.  sudo shutdown -h now From the Bastion Host, test the application using Chrome web browser with this URL http://wordpress-web.onpremsim.env/.  This is the expected screen if the migration was successful: Congratulations, you had migrated your enterprise servers into AWS successfully. "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]